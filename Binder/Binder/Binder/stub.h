/*
* stub.h - a class for Microsoft Visual Studio
*
* Copyright (C) 2014 John Wang
*
* Permission is hereby granted, free of charge, to any person obtaining
* a copy of this software and associated documentation files (the
* ``Software''), to deal in the Software without restriction, including
* without limitation the rights to use, copy, modify, merge, publish,
* distribute, sublicense, and/or sell copies of the Software, and to
* permit persons to whom the Software is furnished to do so, subject to
* the following conditions:
*
* The above copyright notice and this permission notice shall be included
* in all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED ``AS IS'', WITHOUT WARRANTY OF ANY KIND, EXPRESS
* OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
* IN NO EVENT SHALL TONI RONKKO BE LIABLE FOR ANY CLAIM, DAMAGES OR
* OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
* OTHER DEALINGS IN THE SOFTWARE.
*
* $Id: stub.h,v 1.0 2014/12/12 12:00 Taoyuan Taiwan $
*/
#ifndef STUB_H
#define STUB_H

#include <stdio.h>
#include <iostream>
#include <vector>
#include <string>

/**
* Declaration of Stub class.
* This class provide some useful API for extracting and executing all
* binded file from a executable host file. This executable host file
* must be generated by the Binder written by John Wang because it use
* a special method to read the record of binded file. This method
* has strong dependancy on the structure of the record which is
* appended to the end of the host file by John Wang's Binder. So, be
* sure that the destination host file to be extracted and executed is
* the one generated by John Wang's Binder, thank you.
* @class Binder
*/
class Stub {
public:
	/* @constructor */
	Stub();

	/**
	* Set the destination host file name.
	*
	* @param {char*} fName the name of the destiantion host file.
	* @return {bool} return true if the destination host file name
	* is set successfully, return false otherwise.
	*/
	bool setFileName(char*);

	/**
	* Check if the destination host file name is set or not.
	*
	* @return {bool} return true if the destination host file name
	* has already been set, return false otherwise.
	*/
	bool isSetFileName();

	/**
	* Extract and execute all binded file from destination host file.
	*
	* @return {bool} return true if this method is succeeded, return
	* false otherwise.
	*/
	bool extractAndExecute();

	/* @destructor */
	~Stub();
private:
	/* Private attributes */
	char *fileName; /* file name of the destination host file */
	FILE *file; /* pointer to the destination host file */
	std::vector<char*> nameRecord; /* the record of name of all bounded files */
	std::vector<unsigned long> positionRecord; /* record of the begining position of each bounded file in newly generated host file */
	std::vector<unsigned long> sizeRecord; /* the record of file size of each bounded files */

	/* Private methods */

	/**
	* Checking if the target file is an .exe file or not.
	*
	* @param {char*} fileName the name of file to be checked.
	* @return {bool} return true if the target file is an .exe
	* file, return false otherwise.
	*/
	bool checkExeFileNameFormat(char*);

	/**
	* Read the position of binding record which stores all information about
	* binded files.
	*
	* @param {char*} buffer the pointer to the raw data of destination host
	* file in binary.
	* @param {unsigned long} size the size of the raw data.
	* @return {unsigned long} the position of binding record in destination
	* host file.
	*/
	unsigned long readRecordPosition(char*, unsigned long);

	/**
	* Read all binding record and store these information into Stub.
	*
	* @param {char*} buffer the pointer to the raw data of destination host
	* file in binary.
	* @param {unsigned long} recordPosition the start position of the
	* binding record.
	*/
	void readRecord(char*, unsigned long);

	/**
	* Read a block of binding record which stores information about
	* one binded file in destination host file.
	* One binded file has 3 blocks of record:
	* - File name.
	* - Beginning position in destination host file.
	* - Size (in bytes).
	*
	* @param {char*} buffer the pointer to the raw data of destination host
	* file in binary.
	* @param {unsigned long} position the beginning of a block of binding
	* record.
	* @return {char*} pointer to the read information.
	*/
	char *readSingleRecordData(char*, unsigned long);

	/**
	* Create a new empty file and write raw data into this empty file.
	*
	* @param {char*} fileName the name of this newly created file will be.
	* @param {char*} data the raw data to be written into this file.
	* @param {unsigned long} size the size (in bytes) of the raw data.
	* @return {bool} return true if file created successfully, return
	* false otherwise.
	*/
	bool createFile(char*, char*, unsigned long);
};

#endif